name: Tag new version
description: Add new version tag for current branch
inputs:
outputs:
  branch:
    description: Tagged branch name (current branch name)
  version:
    description: New version.
  old-version:
    description: Old version.

runs:
  using: ubuntu_latest
  steps:
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH="${GITHUB_REF#refs/heads/}"
        echo "Current branch is $BRANCH"

        TAGS=$(git tag --list --merged $BRANCH)

        VERSION_TAGS=$(echo "$TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$')
        
        OLD_VERSION=$(echo "$VERSION_TAGS" | sort -V | tail -n1)
        # Check if the latest version is empty
        if [ -z "$OLD_VERSION" ]; then
          echo "Error: No version tags found"
          exit 1
        fi
        echo "Latest tag version is $OLD_VERSION"

        # Extract the current version numbers
        MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
        MINOR=$(echo "$OLD_VERSION" | cut -d. -f2)
        PATCH=$(echo "$OLD_VERSION" | cut -d. -f3)

        # Increment the patch version
        NEW_PATCH=$((PATCH + 1))

        # Construct the new version tag
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "New tag version is $NEW_VERSION"

        # Add new version tag and push
        git tag -a "$NEW_VERSION" -m "Version $NEW_VERSION"
        git push origin "$NEW_VERSION"

        # Set the outputs
        echo "::set-output name=branch::$BRANCH"
        echo "::set-output name=version::$NEW_VERSION"
        echo "::set-output name=old-version::$OLD_VERSION"

        # Set the environemnt variables
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
